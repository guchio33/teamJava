/* tslint:disable */
/* eslint-disable */
/**
 * teamJava
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GetFollowListsUserId200Response
 */
export interface GetFollowListsUserId200Response {
    /**
     * 
     * @type {any}
     * @memberof GetFollowListsUserId200Response
     */
    'followUserId': any;
    /**
     * 
     * @type {any}
     * @memberof GetFollowListsUserId200Response
     */
    'followUserName': any;
    /**
     * 
     * @type {any}
     * @memberof GetFollowListsUserId200Response
     */
    'followUserIcon'?: any;
}
/**
 * 
 * @export
 * @interface GetFollowedListsUserId200Response
 */
export interface GetFollowedListsUserId200Response {
    /**
     * 
     * @type {any}
     * @memberof GetFollowedListsUserId200Response
     */
    'followedUserId': any;
    /**
     * 
     * @type {any}
     * @memberof GetFollowedListsUserId200Response
     */
    'followedUserName': any;
    /**
     * 
     * @type {any}
     * @memberof GetFollowedListsUserId200Response
     */
    'followedUserIcon'?: any;
}
/**
 * 
 * @export
 * @interface GetMessageRoomLists200Response
 */
export interface GetMessageRoomLists200Response {
    /**
     * 
     * @type {any}
     * @memberof GetMessageRoomLists200Response
     */
    'latestMessage': any;
    /**
     * 
     * @type {any}
     * @memberof GetMessageRoomLists200Response
     */
    'userId': any;
    /**
     * 
     * @type {any}
     * @memberof GetMessageRoomLists200Response
     */
    'userName': any;
    /**
     * 
     * @type {any}
     * @memberof GetMessageRoomLists200Response
     */
    'userIcon': any;
}
/**
 * 
 * @export
 * @interface GetMessagesMessageId200Response
 */
export interface GetMessagesMessageId200Response {
    /**
     * 
     * @type {any}
     * @memberof GetMessagesMessageId200Response
     */
    'message': any;
    /**
     * 
     * @type {any}
     * @memberof GetMessagesMessageId200Response
     */
    'sentUserId': any;
    /**
     * 
     * @type {any}
     * @memberof GetMessagesMessageId200Response
     */
    'userIcon': any;
    /**
     * 
     * @type {any}
     * @memberof GetMessagesMessageId200Response
     */
    'createAt': any;
}
/**
 * 
 * @export
 * @interface GetPostLists200Response
 */
export interface GetPostLists200Response {
    /**
     * 
     * @type {any}
     * @memberof GetPostLists200Response
     */
    'productName': any;
    /**
     * 
     * @type {any}
     * @memberof GetPostLists200Response
     */
    'productImage': any;
    /**
     * 
     * @type {any}
     * @memberof GetPostLists200Response
     */
    'userName': any;
    /**
     * 
     * @type {any}
     * @memberof GetPostLists200Response
     */
    'userIcon': any;
    /**
     * 
     * @type {any}
     * @memberof GetPostLists200Response
     */
    'status': any;
    /**
     * 
     * @type {any}
     * @memberof GetPostLists200Response
     */
    'createAt': any;
}
/**
 * 
 * @export
 * @interface GetPostListsRequest
 */
export interface GetPostListsRequest {
    /**
     * 
     * @type {any}
     * @memberof GetPostListsRequest
     */
    'searchWay': any;
    /**
     * 
     * @type {any}
     * @memberof GetPostListsRequest
     */
    'searchWord'?: any;
}
/**
 * 
 * @export
 * @interface GetPostsPostId200Response
 */
export interface GetPostsPostId200Response {
    /**
     * 
     * @type {any}
     * @memberof GetPostsPostId200Response
     */
    'productTitle': any;
    /**
     * 
     * @type {any}
     * @memberof GetPostsPostId200Response
     */
    'productImage': any;
    /**
     * 
     * @type {any}
     * @memberof GetPostsPostId200Response
     */
    'comment': any;
    /**
     * 
     * @type {any}
     * @memberof GetPostsPostId200Response
     */
    'tag': any;
    /**
     * 
     * @type {any}
     * @memberof GetPostsPostId200Response
     */
    'status': any;
}
/**
 * 
 * @export
 * @interface GetUsersUserId200Response
 */
export interface GetUsersUserId200Response {
    /**
     * 
     * @type {any}
     * @memberof GetUsersUserId200Response
     */
    'userName': any;
    /**
     * 
     * @type {any}
     * @memberof GetUsersUserId200Response
     */
    'comment': any;
    /**
     * 
     * @type {any}
     * @memberof GetUsersUserId200Response
     */
    'userIcon': any;
    /**
     * 
     * @type {any}
     * @memberof GetUsersUserId200Response
     */
    'evaluation': any;
}
/**
 * 
 * @export
 * @interface PostBookmarkRequest
 */
export interface PostBookmarkRequest {
    /**
     * 
     * @type {any}
     * @memberof PostBookmarkRequest
     */
    'userId': any;
    /**
     * 
     * @type {any}
     * @memberof PostBookmarkRequest
     */
    'productId': any;
}
/**
 * 
 * @export
 * @interface PostEvaluatesRequest
 */
export interface PostEvaluatesRequest {
    /**
     * 
     * @type {any}
     * @memberof PostEvaluatesRequest
     */
    'userId': any;
    /**
     * 
     * @type {any}
     * @memberof PostEvaluatesRequest
     */
    'ratedUserId': any;
    /**
     * 
     * @type {any}
     * @memberof PostEvaluatesRequest
     */
    'evaluate': any;
    /**
     * 
     * @type {any}
     * @memberof PostEvaluatesRequest
     */
    'comment'?: any;
}
/**
 * 
 * @export
 * @interface PostFollowsRequest
 */
export interface PostFollowsRequest {
    /**
     * 
     * @type {any}
     * @memberof PostFollowsRequest
     */
    'followId': any;
    /**
     * 
     * @type {any}
     * @memberof PostFollowsRequest
     */
    'followedId': any;
}
/**
 * 
 * @export
 * @interface PostLoginRequest
 */
export interface PostLoginRequest {
    /**
     * 
     * @type {any}
     * @memberof PostLoginRequest
     */
    'email': any;
    /**
     * 
     * @type {any}
     * @memberof PostLoginRequest
     */
    'password': any;
}
/**
 * 
 * @export
 * @interface PostMessageRoomsRequest
 */
export interface PostMessageRoomsRequest {
    /**
     * 
     * @type {any}
     * @memberof PostMessageRoomsRequest
     */
    'myUserId': any;
    /**
     * 
     * @type {any}
     * @memberof PostMessageRoomsRequest
     */
    'userId': any;
    /**
     * 
     * @type {any}
     * @memberof PostMessageRoomsRequest
     */
    'productId': any;
}
/**
 * 
 * @export
 * @interface PostMessagesRequest
 */
export interface PostMessagesRequest {
    /**
     * 
     * @type {any}
     * @memberof PostMessagesRequest
     */
    'messageRoomId': any;
    /**
     * 
     * @type {any}
     * @memberof PostMessagesRequest
     */
    'sentUserId': any;
    /**
     * 
     * @type {any}
     * @memberof PostMessagesRequest
     */
    'message': any;
}
/**
 * 
 * @export
 * @interface PostPostsRequest
 */
export interface PostPostsRequest {
    /**
     * 
     * @type {any}
     * @memberof PostPostsRequest
     */
    'productTitle': any;
    /**
     * 
     * @type {any}
     * @memberof PostPostsRequest
     */
    'productImage': any;
    /**
     * 
     * @type {any}
     * @memberof PostPostsRequest
     */
    'comment'?: any;
    /**
     * 
     * @type {any}
     * @memberof PostPostsRequest
     */
    'tag'?: any;
}
/**
 * 
 * @export
 * @interface PostRegister201Response
 */
export interface PostRegister201Response {
    /**
     * 
     * @type {any}
     * @memberof PostRegister201Response
     */
    'userId': any;
    /**
     * 
     * @type {any}
     * @memberof PostRegister201Response
     */
    'userName': any;
}
/**
 * 
 * @export
 * @interface PostRegister400Response
 */
export interface PostRegister400Response {
    /**
     * 
     * @type {any}
     * @memberof PostRegister400Response
     */
    'message': any;
}
/**
 * 
 * @export
 * @interface PostRegisterRequest
 */
export interface PostRegisterRequest {
    /**
     * 
     * @type {any}
     * @memberof PostRegisterRequest
     */
    'userName': any;
    /**
     * 
     * @type {any}
     * @memberof PostRegisterRequest
     */
    'email': any;
    /**
     * 
     * @type {any}
     * @memberof PostRegisterRequest
     */
    'password': any;
}
/**
 * 
 * @export
 * @interface PutPostsPostIdRequest
 */
export interface PutPostsPostIdRequest {
    /**
     * 
     * @type {any}
     * @memberof PutPostsPostIdRequest
     */
    'productTitle'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutPostsPostIdRequest
     */
    'productImage'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutPostsPostIdRequest
     */
    'comment'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutPostsPostIdRequest
     */
    'tag'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutPostsPostIdRequest
     */
    'status'?: any;
}
/**
 * 
 * @export
 * @interface PutUsersUserIdRequest
 */
export interface PutUsersUserIdRequest {
    /**
     * 
     * @type {any}
     * @memberof PutUsersUserIdRequest
     */
    'userId': any;
    /**
     * 
     * @type {PutUsersUserIdRequestEdit}
     * @memberof PutUsersUserIdRequest
     */
    'edit'?: PutUsersUserIdRequestEdit;
}
/**
 * 
 * @export
 * @interface PutUsersUserIdRequestEdit
 */
export interface PutUsersUserIdRequestEdit {
    /**
     * 
     * @type {any}
     * @memberof PutUsersUserIdRequestEdit
     */
    'userName'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutUsersUserIdRequestEdit
     */
    'email'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutUsersUserIdRequestEdit
     */
    'userIcon'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutUsersUserIdRequestEdit
     */
    'school'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutUsersUserIdRequestEdit
     */
    'comment'?: any;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * Unique identifier for the given user.
     * @type {any}
     * @memberof User
     */
    'id': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'name': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'email': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'icon'?: any;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowListsUserId: async (userId: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getFollowListsUserId', 'userId', userId)
            const localVarPath = `/follow-lists/{user-id}`
                .replace(`{${"user-id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowedListsUserId: async (userId: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getFollowedListsUserId', 'userId', userId)
            const localVarPath = `/followed-lists{user-id}`
                .replace(`{${"user-id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {GetPostListsRequest} [getPostListsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageRoomLists: async (getPostListsRequest?: GetPostListsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/message-room-lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getPostListsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} messageRoomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessagesMessageId: async (messageRoomId: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageRoomId' is not null or undefined
            assertParamExists('getMessagesMessageId', 'messageRoomId', messageRoomId)
            const localVarPath = `/messages/{message-room-id}`
                .replace(`{${"message-room-id"}}`, encodeURIComponent(String(messageRoomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {GetPostListsRequest} [getPostListsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostLists: async (getPostListsRequest?: GetPostListsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/post-lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getPostListsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostsPostId: async (postId: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('getPostsPostId', 'postId', postId)
            const localVarPath = `/posts/{post-id}`
                .replace(`{${"post-id"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersUserId: async (userId: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUsersUserId', 'userId', userId)
            const localVarPath = `/users/{user-id}`
                .replace(`{${"user-id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PostBookmarkRequest} [postBookmarkRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBookmark: async (postBookmarkRequest?: PostBookmarkRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bookmark`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postBookmarkRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PostEvaluatesRequest} [postEvaluatesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEvaluates: async (postEvaluatesRequest?: PostEvaluatesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/evaluates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postEvaluatesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PostFollowsRequest} [postFollowsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFollows: async (postFollowsRequest?: PostFollowsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/follows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postFollowsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PostLoginRequest} [postLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogin: async (postLoginRequest?: PostLoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PostMessageRoomsRequest} [postMessageRoomsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMessageRooms: async (postMessageRoomsRequest?: PostMessageRoomsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/message-rooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postMessageRoomsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PostMessagesRequest} [postMessagesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMessages: async (postMessagesRequest?: PostMessagesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postMessagesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PostPostsRequest} [postPostsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPosts: async (postPostsRequest?: PostPostsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postPostsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PostRegisterRequest} [postRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRegister: async (postRegisterRequest?: PostRegisterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postRegisterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} postId 
         * @param {PutPostsPostIdRequest} [putPostsPostIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPostsPostId: async (postId: any, putPostsPostIdRequest?: PutPostsPostIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('putPostsPostId', 'postId', postId)
            const localVarPath = `/posts/{post-id}`
                .replace(`{${"post-id"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putPostsPostIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} userId 
         * @param {PutUsersUserIdRequest} [putUsersUserIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersUserId: async (userId: any, putUsersUserIdRequest?: PutUsersUserIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('putUsersUserId', 'userId', userId)
            const localVarPath = `/users/{user-id}`
                .replace(`{${"user-id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putUsersUserIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollowListsUserId(userId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFollowListsUserId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFollowListsUserId(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollowedListsUserId(userId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFollowedListsUserId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFollowedListsUserId(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {GetPostListsRequest} [getPostListsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessageRoomLists(getPostListsRequest?: GetPostListsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMessageRoomLists200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessageRoomLists(getPostListsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} messageRoomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessagesMessageId(messageRoomId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMessagesMessageId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessagesMessageId(messageRoomId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {GetPostListsRequest} [getPostListsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostLists(getPostListsRequest?: GetPostListsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPostLists200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostLists(getPostListsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostsPostId(postId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPostsPostId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostsPostId(postId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersUserId(userId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUsersUserId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersUserId(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {PostBookmarkRequest} [postBookmarkRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBookmark(postBookmarkRequest?: PostBookmarkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBookmark(postBookmarkRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {PostEvaluatesRequest} [postEvaluatesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEvaluates(postEvaluatesRequest?: PostEvaluatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postEvaluates(postEvaluatesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {PostFollowsRequest} [postFollowsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFollows(postFollowsRequest?: PostFollowsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFollows(postFollowsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {PostLoginRequest} [postLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLogin(postLoginRequest?: PostLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostRegister201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLogin(postLoginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {PostMessageRoomsRequest} [postMessageRoomsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMessageRooms(postMessageRoomsRequest?: PostMessageRoomsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMessageRooms(postMessageRoomsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {PostMessagesRequest} [postMessagesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMessages(postMessagesRequest?: PostMessagesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMessages(postMessagesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {PostPostsRequest} [postPostsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPosts(postPostsRequest?: PostPostsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPosts(postPostsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {PostRegisterRequest} [postRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRegister(postRegisterRequest?: PostRegisterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostRegister201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRegister(postRegisterRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} postId 
         * @param {PutPostsPostIdRequest} [putPostsPostIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putPostsPostId(postId: any, putPostsPostIdRequest?: PutPostsPostIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putPostsPostId(postId, putPostsPostIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} userId 
         * @param {PutUsersUserIdRequest} [putUsersUserIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUsersUserId(userId: any, putUsersUserIdRequest?: PutUsersUserIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUsersUserId(userId, putUsersUserIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowListsUserId(userId: any, options?: any): AxiosPromise<GetFollowListsUserId200Response> {
            return localVarFp.getFollowListsUserId(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowedListsUserId(userId: any, options?: any): AxiosPromise<GetFollowedListsUserId200Response> {
            return localVarFp.getFollowedListsUserId(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {GetPostListsRequest} [getPostListsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageRoomLists(getPostListsRequest?: GetPostListsRequest, options?: any): AxiosPromise<GetMessageRoomLists200Response> {
            return localVarFp.getMessageRoomLists(getPostListsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} messageRoomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessagesMessageId(messageRoomId: any, options?: any): AxiosPromise<GetMessagesMessageId200Response> {
            return localVarFp.getMessagesMessageId(messageRoomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {GetPostListsRequest} [getPostListsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostLists(getPostListsRequest?: GetPostListsRequest, options?: any): AxiosPromise<GetPostLists200Response> {
            return localVarFp.getPostLists(getPostListsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostsPostId(postId: any, options?: any): AxiosPromise<GetPostsPostId200Response> {
            return localVarFp.getPostsPostId(postId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersUserId(userId: any, options?: any): AxiosPromise<GetUsersUserId200Response> {
            return localVarFp.getUsersUserId(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {PostBookmarkRequest} [postBookmarkRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBookmark(postBookmarkRequest?: PostBookmarkRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postBookmark(postBookmarkRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {PostEvaluatesRequest} [postEvaluatesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEvaluates(postEvaluatesRequest?: PostEvaluatesRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postEvaluates(postEvaluatesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {PostFollowsRequest} [postFollowsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFollows(postFollowsRequest?: PostFollowsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postFollows(postFollowsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {PostLoginRequest} [postLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogin(postLoginRequest?: PostLoginRequest, options?: any): AxiosPromise<PostRegister201Response> {
            return localVarFp.postLogin(postLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {PostMessageRoomsRequest} [postMessageRoomsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMessageRooms(postMessageRoomsRequest?: PostMessageRoomsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postMessageRooms(postMessageRoomsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {PostMessagesRequest} [postMessagesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMessages(postMessagesRequest?: PostMessagesRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postMessages(postMessagesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {PostPostsRequest} [postPostsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPosts(postPostsRequest?: PostPostsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postPosts(postPostsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {PostRegisterRequest} [postRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRegister(postRegisterRequest?: PostRegisterRequest, options?: any): AxiosPromise<PostRegister201Response> {
            return localVarFp.postRegister(postRegisterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} postId 
         * @param {PutPostsPostIdRequest} [putPostsPostIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPostsPostId(postId: any, putPostsPostIdRequest?: PutPostsPostIdRequest, options?: any): AxiosPromise<void> {
            return localVarFp.putPostsPostId(postId, putPostsPostIdRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} userId 
         * @param {PutUsersUserIdRequest} [putUsersUserIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersUserId(userId: any, putUsersUserIdRequest?: PutUsersUserIdRequest, options?: any): AxiosPromise<void> {
            return localVarFp.putUsersUserId(userId, putUsersUserIdRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Your GET endpoint
     * @param {any} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFollowListsUserId(userId: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFollowListsUserId(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {any} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFollowedListsUserId(userId: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFollowedListsUserId(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {GetPostListsRequest} [getPostListsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMessageRoomLists(getPostListsRequest?: GetPostListsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMessageRoomLists(getPostListsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {any} messageRoomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMessagesMessageId(messageRoomId: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMessagesMessageId(messageRoomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {GetPostListsRequest} [getPostListsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPostLists(getPostListsRequest?: GetPostListsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPostLists(getPostListsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {any} postId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPostsPostId(postId: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPostsPostId(postId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {any} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsersUserId(userId: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsersUserId(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {PostBookmarkRequest} [postBookmarkRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postBookmark(postBookmarkRequest?: PostBookmarkRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postBookmark(postBookmarkRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {PostEvaluatesRequest} [postEvaluatesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postEvaluates(postEvaluatesRequest?: PostEvaluatesRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postEvaluates(postEvaluatesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {PostFollowsRequest} [postFollowsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postFollows(postFollowsRequest?: PostFollowsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postFollows(postFollowsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {PostLoginRequest} [postLoginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postLogin(postLoginRequest?: PostLoginRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postLogin(postLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {PostMessageRoomsRequest} [postMessageRoomsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postMessageRooms(postMessageRoomsRequest?: PostMessageRoomsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postMessageRooms(postMessageRoomsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {PostMessagesRequest} [postMessagesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postMessages(postMessagesRequest?: PostMessagesRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postMessages(postMessagesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {PostPostsRequest} [postPostsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postPosts(postPostsRequest?: PostPostsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postPosts(postPostsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {PostRegisterRequest} [postRegisterRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postRegister(postRegisterRequest?: PostRegisterRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postRegister(postRegisterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} postId 
     * @param {PutPostsPostIdRequest} [putPostsPostIdRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putPostsPostId(postId: any, putPostsPostIdRequest?: PutPostsPostIdRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putPostsPostId(postId, putPostsPostIdRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} userId 
     * @param {PutUsersUserIdRequest} [putUsersUserIdRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putUsersUserId(userId: any, putUsersUserIdRequest?: PutUsersUserIdRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putUsersUserId(userId, putUsersUserIdRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


